[
	{
		"id": 0,
		"title": "Template",
		"projectDetail": {
			"problem": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum. Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum",
			"desired": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum. Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum",
			"process": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum. Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum",
			"result": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum. Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum"
		},
		"image": "placeholder.webp",
		"liveLink": "",
		"githubLink": "",
		"techStack": [
			"",
			"",
			""
		],
		"sources": [
			{
				"source": "Olivier Vromans",
				"link": "https://www.vromans.dev"
			}
		],
		"date": "MM/DD/YYYY",
		"show": false
	},
	{
		"id": 1,
		"title": "Selfhosted Home Media Server",
		"summary": "",
		"projectDetail": {
			"problem": "As a graduate in Network Management transitioning into development, I found myself missing the hands-on experience of building servers. To indulge this hobby, I invested in an Intel NUC, transforming it into a personalized server. Now that I have a server, I needed a purpose for it. After canceling my subscription to all streaming services in the past, it got me thinking, 'Why don't I just host it myself?' With that in mind, I formulated my main question: 'How can I create a self-hosted streaming service that is fully automated?'",
			"desired": "I want to create a self-hosted streaming service that is fully automated. I want to make it as easy as possible to use, so people who don't have this knowledge can still enjoy watching a movie or show.",
			"process": "Italic: To make a disclaimer before I talk about how I accomplished all this, I want to point out that this was not as easy as I make it out to be. I encountered many problems and errors along the way and even had to send my Intel back because of an error within the system itself. I also took breaks between steps because it would annoy me with the errors or problems that occurred while trying to make all this magic happen, I also choose to make this process a little different than what in reality happend because it would be better to understand in this way I hope. But that's enough of my disclaimer. I hope you enjoy my journey in building an automated streaming service. To start this project, I first researched different operating systems for their pros and cons and which would be great to self-host services on. After some research, there were two options I had in mind: TrueNAS or Unraid. Both operate similarly, featuring GUIs, Docker support, and VM functionality. However, there are some differences between them. * TrueNAS is free; Unraid is not. * Data management: - TrueNAS uses ZFS, which has features that enhance data integrity, protection, and management. - Unraid uses XFS, known for its scalability, efficient handling of large files, and low latency performance. * Other: - TrueNAS = Performance, learning curve, advanced. - Unraid = Easy and active, friendly community support. After some consideration, I have chosen Unraid mainly because of its scalability. Now that the setup of the operating system was finished, it was time to search for ways to create an automated streaming service. I found a YouTube channel called IbraCorp (link) and TRaSH Guides (link) that had amazing documentation and tutorials on how to set up everything. The first thing I needed to do was create a Docker network where every container would reside. After creating the network, I needed to establish a share where I could create the folder structure. This was to ensure a neat and organized file system where every file goes in the right folder. Once the project setup was complete, I could begin the setup for the services. Thanks to TRaSH Guides, I came across the Starr Apps. Arrs are services that are designed to automatically grab, sort, organize, and monitor my Movies and TV Shows and other media types, making them perfect for my goal. I started by downloading Radarr, the service for movies, as it seemed simpler. After downloading the application and spinning it up, I encountered my first problem: it said I needed a download client. For the download client, I explored a couple of options and settled on Deluge, a simple-to-use download client with minimal setup required. I spun up the application and installed the community labels plugin. With the label plugin I created a movie label that will put any complete movie in the movie folder. This will later be used for tv shows and other labels aswell. With deluge connected and the remote path mappings fixed, the next error Radarr threw at me was that I needed indexes for it to search for movies. I had a couple of ways to address this; one was to manually add my torrent website to the application. However, that wasn't aligned with my goal, so I searched for a way to do it once and have it sent to all applications that needed it. I chose to use the Starr Apps Prowlarr, an indexer manager/proxy. After downloading the application and adding all my torrent websites, I connected it to Radarr. Now, it sends all the indexers to Radarr, and I don't need to do it myself. Now it was time to test it out. After adding a new movie, it started searching for the movie and downloading it, placing it in the right folder. Now that it was downloaded and visible in the CLI, I still couldn't watch it. I needed an application that would check the folders and let me stream the files. Plex and Jellyfin were my two options, and I wasn't sure which one to use, so I set them both up. After using both applications, I concluded that Plex is nice to use but limits self-control, while Jellyfin gives me all the freedom I want and desire. So, with that in mind, you can probably guess which one I choose, thats right Plex because I still haven't got arround to setup Jellyfin up for my desire so both are still running and I use which I feel like using that day. But, jokes aside, let's get back to the setup. Now that I can add a new movie and see it, it's time to make the adding automated. I found a request management tool called Overseer and Jellyseer. I chose to go with Jellyseer because it felt right with Jellyfin, but they do exactly the same, and there are no differences. To set this up, I added the Plex Server and Radarr. Now I can go to the Jellyseer website, request a movie, and it will be downloaded and synced with my streaming servers. My goal is partially complete; I just needed to add TV shows with Sonarr, or I would say, I just had to make it harder for myself. So why did I make it harder? Well, if you didn't know, I like to watch anime, so naturally, I want that in a completely different folder and have the option to choose between subtitles or English dubbed. Now, let's get started then. I spun up Sonarr and connected Prowlarr and Deluge to the application. So normally, you would be done, but in my case, I needed to take some extra steps. Firstly, I duplicated Deluge and added the anime label to it so that Deluge can put the file in the right folder. Next, the indexer: for the normal indexers, I added the label 'series' and connected them to the regular Deluge. After that, I duplicated every indexer and added the label 'anime' to each, then changed the priority by one less so it will first check that. Lastly, I added the duplicate of the anime Deluge to it. That's two steps done; now, I needed the language profiles and a couple more details. After many errors and troubleshooting, it all worked, and the project was a success.",
			"result": "Despite facing challenges, overcoming errors, and engaging in necessary troubleshooting, the final outcome is a success. The connection between services deliver a user-friendly and completely automated streaming experience. The ease of requesting, downloading, and streaming content what this project provides is as easy as a two click button. This project thought me that not only you can selfhost a complete streaming service but also troubleshooting, overcoming problems, determination and patience are key to success. I am very proud of this project and I hope you enjoyed reading about it as much as I enjoyed making it"
		},
		"image": "project_3-1.webp",
		"liveLink": "",
		"githubLink": "",
		"techStack": [
			"Linux",
			"Unraid",
			"Docker",
			"Starr Apps",
			"Deluge",
			"Plex"
		],
		"sources": [
			{
				"source": "IbraCorp",
				"link": "https://www.youtube.com/@IBRACORP"
			},
			{
				"source": "TRaSH Guides",
				"link": "https://trash-guides.info/"
			},
			{
				"source": "Unraid",
				"link": "https://unraid.net/"
			},
			{
				"source": "Servarr",
				"link": "https://wiki.servarr.com/"
			}
		],
		"date": "06/11/2022",
		"show": true
	}
]